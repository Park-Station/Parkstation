using Robust.Client.UserInterface.CustomControls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Content.Shared.SimpleStation14.AI;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.GameObjects;

namespace Content.Client.SimpleStation14.AI.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AICameraList : DefaultWindow
    {
        [Dependency] private readonly IEntityManager _entityManager = default!;

        private AICameraComponent? _selectedCamera;

        public AICameraList()
        {
            RobustXamlLoader.Load(this);

            SubnetList.OnItemSelected += ItemSelected;
            SubnetList.OnItemDeselected += ItemDeselected;
            SearchBar.OnTextChanged += (_) => UpdateCameraList(SearchBar.Text);

            UpdateCameraList();
        }
        private void ItemSelected(ItemList.ItemListSelectedEventArgs obj)
        {
            _selectedCamera = (AICameraComponent) obj.ItemList[obj.ItemIndex].Metadata!;
            UpdateCameraList();
        }

        private void ItemDeselected(ItemList.ItemListDeselectedEventArgs obj)
        {
            _selectedCamera = null;
            UpdateCameraList();
        }

        public void UpdateCameraList(string? filter = null)
        {
            SubnetList.Clear();

            // Error object reference not set to instance of an object?
            // var cameras = _entityManager.EntityQuery<AICameraComponent>();
            var cameras = "string";
            cameras = null;
            if (cameras == null)
            {
                Text.Text = "No cameras found.";
                return;
            }
            Text.Text = "";

            // foreach (var camera in cameras)
            // {
            //     var cameraMeta = _entityManager.GetComponent<MetaDataComponent>(camera.Owner);

            //     if (!string.IsNullOrEmpty(filter) && !cameraMeta.EntityName.ToLowerInvariant().Contains(filter.Trim().ToLowerInvariant()))
            //     {
            //         continue;
            //     }

            //     ItemList.Item cameraItem = new(SubnetList)
            //     {
            //         Metadata = camera,
            //         Text = cameraMeta.EntityName
            //     };

            //     SubnetList.Add(cameraItem);
            // }
        }
    }
}
