using Content.Client.SimpleStation14.Documentation.UI.Pages;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface;

namespace Content.Client.SimpleStation14.Documentation.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class DocsWindow : DefaultWindow
    {
        public DocsWindow()
        {
            RobustXamlLoader.Load(this);

            UICloseButton.OnPressed += _ => Close();

            ChildLoop(Categories);
        }

        private void ChildLoop(Control Parent)
        {
            Button fakeButton = new();
            foreach (var item in Parent.Children)
            {
                if (item.GetType() != fakeButton.GetType())
                {
                    ChildLoop(item);
                    continue;
                }
                SetSetPage(item);
            }
        }

        private void SetSetPage(Control butto)
        {
            Button buttn = (Button) butto;

            buttn.OnPressed += ev =>
            {
                if (ev.Button != null)
                {
                    SetPage(ev.Button);
                }
            };
        }

        public void SetPage(BaseButton page)
        {
            // Clear page content
            Contens.RemoveAllChildren();
            Contens.AddChild(new Label() { Text = "Page content does not exist, or could not be found.\nIf page content does exist, make sure you named the button and content correctly.\nIf the page doesn't exist, consider making it!" });

            var Page = new WikiPages();
            var contents = Page.contents;

            foreach (var child in contents.Children)
            {
                // These are needed, if they don't exist for some reason stop
                if (child.Name == null || page.Name == null) return;

                // See if the button matches a content ID
                if (child.Name == $"{page.Name}Contents")
                {
                    // Clear empty page message (and anything left behind somehow)
                    Contens.RemoveAllChildren();

                    // Add the content to the visible UI
                    child.Orphan();
                    Contens.AddChild(child);

                    // Stop looking for matches
                    return;
                }
            }
        }
    }
}
